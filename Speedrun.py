import yt_dlp as youtube_dl
import requests
import os
import random
import cv2
import json

# Dictionnaire pour convertir les codes pays en emoji de drapeaux
COUNTRY_FLAGS = {
    "us": "ğŸ‡ºğŸ‡¸", "br": "ğŸ‡§ğŸ‡·", "fr": "ğŸ‡«ğŸ‡·", "jp": "ğŸ‡¯ğŸ‡µ", "de": "ğŸ‡©ğŸ‡ª",
    "uk": "ğŸ‡¬ğŸ‡§", "ca": "ğŸ‡¨ğŸ‡¦", "au": "ğŸ‡¦ğŸ‡º", "it": "ğŸ‡®ğŸ‡¹", "es": "ğŸ‡ªğŸ‡¸",
    "ru": "ğŸ‡·ğŸ‡º", "cn": "ğŸ‡¨ğŸ‡³", "in": "ğŸ‡®ğŸ‡³", "mx": "ğŸ‡²ğŸ‡½", "kr": "ğŸ‡°ğŸ‡·",
    "sa": "ğŸ‡¸ğŸ‡¦", "nl": "ğŸ‡³ğŸ‡±", "se": "ğŸ‡¸ğŸ‡ª", "no": "ğŸ‡³ğŸ‡´", "dk": "ğŸ‡©ğŸ‡°",
    "fi": "ğŸ‡«ğŸ‡®", "pl": "ğŸ‡µğŸ‡±", "za": "ğŸ‡¿ğŸ‡¦", "ch": "ğŸ‡¨ğŸ‡­", "at": "ğŸ‡¦ğŸ‡¹",
    "be": "ğŸ‡§ğŸ‡ª", "ar": "ğŸ‡¦ğŸ‡·", "cl": "ğŸ‡¨ğŸ‡±", "co": "ğŸ‡¨ğŸ‡´", "ve": "ğŸ‡»ğŸ‡ª",
    "pe": "ğŸ‡µğŸ‡ª", "ua": "ğŸ‡ºğŸ‡¦", "gr": "ğŸ‡¬ğŸ‡·", "pt": "ğŸ‡µğŸ‡¹", "cz": "ğŸ‡¨ğŸ‡¿",
    "sk": "ğŸ‡¸ğŸ‡°", "hu": "ğŸ‡­ğŸ‡º", "ro": "ğŸ‡·ğŸ‡´", "bg": "ğŸ‡§ğŸ‡¬", "rs": "ğŸ‡·ğŸ‡¸",
    "hr": "ğŸ‡­ğŸ‡·", "si": "ğŸ‡¸ğŸ‡®", "lv": "ğŸ‡±ğŸ‡»", "ee": "ğŸ‡ªğŸ‡ª", "lt": "ğŸ‡±ğŸ‡¹",
    "ie": "ğŸ‡®ğŸ‡ª", "nz": "ğŸ‡³ğŸ‡¿", "my": "ğŸ‡²ğŸ‡¾", "sg": "ğŸ‡¸ğŸ‡¬", "id": "ğŸ‡®ğŸ‡©",
    "ph": "ğŸ‡µğŸ‡­", "th": "ğŸ‡¹ğŸ‡­", "vn": "ğŸ‡»ğŸ‡³", "mm": "ğŸ‡²ğŸ‡²", "kh": "ğŸ‡°ğŸ‡­",
    "bd": "ğŸ‡§ğŸ‡©", "pk": "ğŸ‡µğŸ‡°", "ae": "ğŸ‡¦ğŸ‡ª", "il": "ğŸ‡®ğŸ‡±", "eg": "ğŸ‡ªğŸ‡¬",
    "ng": "ğŸ‡³ğŸ‡¬", "ke": "ğŸ‡°ğŸ‡ª", "gh": "ğŸ‡¬ğŸ‡­", "dz": "ğŸ‡©ğŸ‡¿", "ma": "ğŸ‡²ğŸ‡¦",
    "tn": "ğŸ‡¹ğŸ‡³", "tr": "ğŸ‡¹ğŸ‡·", "ir": "ğŸ‡®ğŸ‡·", "iq": "ğŸ‡®ğŸ‡¶", "sy": "ğŸ‡¸ğŸ‡¾",
    "lb": "ğŸ‡±ğŸ‡§", "jo": "ğŸ‡¯ğŸ‡´", "qa": "ğŸ‡¶ğŸ‡¦", "kw": "ğŸ‡°ğŸ‡¼", "om": "ğŸ‡´ğŸ‡²",
    "ye": "ğŸ‡¾ğŸ‡ª", "ge": "ğŸ‡¬ğŸ‡ª", "am": "ğŸ‡¦ğŸ‡²", "az": "ğŸ‡¦ğŸ‡¿", "tm": "ğŸ‡¹ğŸ‡²",
    "np": "ğŸ‡³ğŸ‡µ", "lk": "ğŸ‡±ğŸ‡°", "bt": "ğŸ‡§ğŸ‡¹", "mv": "ğŸ‡²ğŸ‡»", "bn": "ğŸ‡§ğŸ‡³",
    "tw": "ğŸ‡¹ğŸ‡¼", "hk": "ğŸ‡­ğŸ‡°", "mo": "ğŸ‡²ğŸ‡´", "kh": "ğŸ‡°ğŸ‡­", "la": "ğŸ‡±ğŸ‡¦",
    "bd": "ğŸ‡§ğŸ‡©", "mm": "ğŸ‡²ğŸ‡²", "tl": "ğŸ‡¹ğŸ‡±", "pg": "ğŸ‡µğŸ‡¬", "fj": "ğŸ‡«ğŸ‡¯",
    "sb": "ğŸ‡¸ğŸ‡§", "vu": "ğŸ‡»ğŸ‡º", "nc": "ğŸ‡³ğŸ‡¨", "pf": "ğŸ‡µğŸ‡«", "wf": "ğŸ‡¼ğŸ‡«",
    "to": "ğŸ‡¹ğŸ‡´", "tv": "ğŸ‡¹ğŸ‡»", "ki": "ğŸ‡°ğŸ‡®", "nr": "ğŸ‡³ğŸ‡·", "ws": "ğŸ‡¼ğŸ‡¸",
    "as": "ğŸ‡¦ğŸ‡¸", "ck": "ğŸ‡¨ğŸ‡°", "nu": "ğŸ‡³ğŸ‡º", "mp": "ğŸ‡²ğŸ‡µ", "gu": "ğŸ‡¬ğŸ‡º",
    "pw": "ğŸ‡µğŸ‡¼", "mh": "ğŸ‡²ğŸ‡­", "fm": "ğŸ‡«ğŸ‡²", "mh": "ğŸ‡²ğŸ‡­", "fm": "ğŸ‡«ğŸ‡²",
    "ki": "ğŸ‡°ğŸ‡®", "nr": "ğŸ‡³ğŸ‡·", "mh": "ğŸ‡²ğŸ‡­", "pw": "ğŸ‡µğŸ‡¼", "as": "ğŸ‡¦ğŸ‡¸",
    "ws": "ğŸ‡¼ğŸ‡¸", "sb": "ğŸ‡¸ğŸ‡§", "vu": "ğŸ‡»ğŸ‡º", "fj": "ğŸ‡«ğŸ‡¯", "pg": "ğŸ‡µğŸ‡¬",
    "tl": "ğŸ‡¹ğŸ‡±", "nz": "ğŸ‡³ğŸ‡¿", "au": "ğŸ‡¦ğŸ‡º", "ck": "ğŸ‡¨ğŸ‡°", "tv": "ğŸ‡¹ğŸ‡»",
    "pf": "ğŸ‡µğŸ‡«", "ki": "ğŸ‡°ğŸ‡®", "nc": "ğŸ‡³ğŸ‡¨", "nu": "ğŸ‡³ğŸ‡º", "to": "ğŸ‡¹ğŸ‡´",
    "wf": "ğŸ‡¼ğŸ‡«", "sb": "ğŸ‡¸ğŸ‡§", "vu": "ğŸ‡»ğŸ‡º", "fj": "ğŸ‡«ğŸ‡¯", "pg": "ğŸ‡µğŸ‡¬",
    "tl": "ğŸ‡¹ğŸ‡±", "nz": "ğŸ‡³ğŸ‡¿", "au": "ğŸ‡¦ğŸ‡º", "ck": "ğŸ‡¨ğŸ‡°", "tv": "ğŸ‡¹ğŸ‡»",
    "pf": "ğŸ‡µğŸ‡«", "ki": "ğŸ‡°ğŸ‡®", "nc": "ğŸ‡³ğŸ‡¨", "nu": "ğŸ‡³ğŸ‡º", "to": "ğŸ‡¹ğŸ‡´",
    "wf": "ğŸ‡¼ğŸ‡«", "sb": "ğŸ‡¸ğŸ‡§", "vu": "ğŸ‡»ğŸ‡º", "fj": "ğŸ‡«ğŸ‡¯", "pg": "ğŸ‡µğŸ‡¬",
    "tl": "ğŸ‡¹ğŸ‡±", "nz": "ğŸ‡³ğŸ‡¿", "au": "ğŸ‡¦ğŸ‡º", "ck": "ğŸ‡¨ğŸ‡°", "tv": "ğŸ‡¹ğŸ‡»",
    "pf": "ğŸ‡µğŸ‡«", "ki": "ğŸ‡°ğŸ‡®", "nc": "ğŸ‡³ğŸ‡¨", "nu": "ğŸ‡³ğŸ‡º", "to": "ğŸ‡¹ğŸ‡´",
    "wf": "ğŸ‡¼ğŸ‡«", "sb": "ğŸ‡¸ğŸ‡§", "vu": "ğŸ‡»ğŸ‡º", "fj": "ğŸ‡«ğŸ‡¯", "pg": "ğŸ‡µğŸ‡¬",
    "tl": "ğŸ‡¹ğŸ‡±", "nz": "ğŸ‡³ğŸ‡¿",
}

def get_flag_emoji(country_code):
    return COUNTRY_FLAGS.get(country_code.lower(), "")

def get_games():
    url = "https://www.speedrun.com/api/v1/games"
    response = requests.get(url)
    if response.status_code == 200:
        games = response.json()['data']
        return {game['id']: game['names']['international'] for game in games}
    else:
        print(f"Erreur lors de la rÃ©cupÃ©ration des jeux. Statut {response.status_code}")
        return {}

def get_player_info(player_reference):
    player_id = player_reference.get('id') or player_reference['uri'].split('/')[-1]
    url = f"https://www.speedrun.com/api/v1/users/{player_id}"
    response = requests.get(url)
    if response.status_code == 200:
        player_data = response.json().get('data')
        if player_data:
            player_name = player_data['names']['international']
            country_code = player_data.get('location', {}).get('country', {}).get('code', 'Inconnu') if player_data.get('location') else 'Inconnu'
            return player_name, country_code
        else:
            return "Inconnu", "Inconnu"
    else:
        return "Inconnu", "Inconnu"

def get_top_runs_with_video(game_id, game_name, used_runs_db):
    categories_url = f"https://www.speedrun.com/api/v1/games/{game_id}/categories"
    categories_response = requests.get(categories_url)
    if categories_response.status_code != 200:
        print(f"Erreur lors de la rÃ©cupÃ©ration des catÃ©gories pour le jeu {game_id}. Statut {categories_response.status_code}")
        return []

    categories = categories_response.json()['data']
    top_runs = []
    for category in categories:
        category_id = category['id']
        leaderboard_url = f"https://www.speedrun.com/api/v1/leaderboards/{game_id}/category/{category_id}?top=3"
        leaderboard_response = requests.get(leaderboard_url)
        if leaderboard_response.status_code == 200:
            leaderboard = leaderboard_response.json()['data']
            runs = leaderboard['runs']
            for run in runs:
                run_id = run['run']['id']
                if run_id in used_runs_db:
                    continue  # Ignorer les runs dÃ©jÃ  utilisÃ©s
                video_link = run['run'].get('videos', {}).get('links', [{}])[0].get('uri', '')
                if video_link:
                    player_info = run['run']['players'][0]
                    player_name, country = get_player_info(player_info)
                    category_name = category['name']
                    run_date = run['run'].get('date', 'Date inconnue')
                    top_runs.append({
                        'game_name': game_name,
                        'run_id': run_id,
                        'player_name': player_name,
                        'country': country,
                        'category': category_name,
                        'date': run_date,
                        'video_url': video_link
                    })
    return top_runs

def download_youtube_video(url, save_path, run_info):
    ydl_opts = {
        'format': 'best',
        'outtmpl': os.path.join(save_path, '%(title)s.%(ext)s'),
        'noplaylist': True
    }
    with youtube_dl.YoutubeDL(ydl_opts) as ydl:
        info_dict = ydl.extract_info(url, download=True)
        original_video_title = info_dict['title']
        video_extension = info_dict['ext']
        video_filename = f"{original_video_title}.{video_extension}"
        final_video_filename = f"{original_video_title}_finale.{video_extension}"
        final_video_path = os.path.join("A:\\Dossiers\\Documents\\SpeedRun_tiktok\\Video_final", final_video_filename)
        add_text_to_video(os.path.join(save_path, video_filename), final_video_path, run_info)
        print(f"TÃ©lÃ©chargement et traitement de la vidÃ©o '{original_video_title}' terminÃ©.")

def add_text_to_video(video_path, final_video_path, run_info):
    cap = cv2.VideoCapture(video_path)
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(final_video_path, fourcc, cap.get(cv2.CAP_PROP_FPS), (int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)), int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))))
    country_flag = get_flag_emoji(run_info['country'])
    text_content = f"{run_info['player_name']} {country_flag}\n{run_info['game_name']}\n{run_info['category']}\n{run_info['date']}"
    font = cv2.FONT_HERSHEY_SIMPLEX
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        y0, dy = 50, 40  # Ajuster l'espacement vertical entre les lignes
        for i, line in enumerate(text_content.split('\n')):
            y = y0 + i*dy
            cv2.putText(frame, line, (50, y), font, 1, (255, 255, 255), 2)
        out.write(frame)
    cap.release()
    out.release()
    print(f"Montage vidÃ©o terminÃ© pour '{final_video_path}'.")

def main():
    games = get_games()
    if not games:
        print("Aucun jeu disponible.")
        return

    try:
        with open("used_runs_db.json", "r") as file:
            used_runs_db = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        used_runs_db = {}

    found_runs = 0
    while found_runs < 3:
        game_id, game_name = random.choice(list(games.items()))
        top_runs = get_top_runs_with_video(game_id, game_name, used_runs_db)
        if top_runs:
            for run in top_runs:
                if found_runs < 3:
                    video_url = run['video_url']
                    download_path = "A:\\Dossiers\\Documents\\SpeedRun_tiktok\\Video_download"
                    download_youtube_video(video_url, download_path, run)
                    print(f"Run sÃ©lectionnÃ© : {run}")
                    used_runs_db[run['run_id']] = run['category']
                    found_runs += 1
                else:
                    break
        else:
            print(f"Pas de runs du TOP 3 trouvÃ©s pour le jeu {game_name}")

    with open("used_runs_db.json", "w") as file:
        json.dump(used_runs_db, file)

if __name__ == "__main__":
    main()
