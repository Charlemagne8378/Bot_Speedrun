import requests
import os
import random
import cv2
import json
import yt_dlp as youtube_dl
import re

# Constantes et configurations
API_BASE_URL = "https://www.speedrun.com/api/v1"
COUNTRY_FLAGS = {
    "us": "ğŸ‡ºğŸ‡¸", "br": "ğŸ‡§ğŸ‡·", "fr": "ğŸ‡«ğŸ‡·", "jp": "ğŸ‡¯ğŸ‡µ", "de": "ğŸ‡©ğŸ‡ª",
    "uk": "ğŸ‡¬ğŸ‡§", "ca": "ğŸ‡¨ğŸ‡¦", "au": "ğŸ‡¦ğŸ‡º", "it": "ğŸ‡®ğŸ‡¹", "es": "ğŸ‡ªğŸ‡¸",
    "ru": "ğŸ‡·ğŸ‡º", "cn": "ğŸ‡¨ğŸ‡³", "in": "ğŸ‡®ğŸ‡³", "mx": "ğŸ‡²ğŸ‡½", "kr": "ğŸ‡°ğŸ‡·",
    "sa": "ğŸ‡¸ğŸ‡¦", "nl": "ğŸ‡³ğŸ‡±", "se": "ğŸ‡¸ğŸ‡ª", "no": "ğŸ‡³ğŸ‡´", "dk": "ğŸ‡©ğŸ‡°",
    "fi": "ğŸ‡«ğŸ‡®", "pl": "ğŸ‡µğŸ‡±", "za": "ğŸ‡¿ğŸ‡¦", "ch": "ğŸ‡¨ğŸ‡­", "at": "ğŸ‡¦ğŸ‡¹",
    "be": "ğŸ‡§ğŸ‡ª", "ar": "ğŸ‡¦ğŸ‡·", "cl": "ğŸ‡¨ğŸ‡±", "co": "ğŸ‡¨ğŸ‡´", "ve": "ğŸ‡»ğŸ‡ª",
    "pe": "ğŸ‡µğŸ‡ª", "ua": "ğŸ‡ºğŸ‡¦", "gr": "ğŸ‡¬ğŸ‡·", "pt": "ğŸ‡µğŸ‡¹", "cz": "ğŸ‡¨ğŸ‡¿",
    "sk": "ğŸ‡¸ğŸ‡°", "hu": "ğŸ‡­ğŸ‡º", "ro": "ğŸ‡·ğŸ‡´", "bg": "ğŸ‡§ğŸ‡¬", "rs": "ğŸ‡·ğŸ‡¸",
    "hr": "ğŸ‡­ğŸ‡·", "si": "ğŸ‡¸ğŸ‡®", "lv": "ğŸ‡±ğŸ‡»", "ee": "ğŸ‡ªğŸ‡ª", "lt": "ğŸ‡±ğŸ‡¹",
    "ie": "ğŸ‡®ğŸ‡ª", "nz": "ğŸ‡³ğŸ‡¿", "my": "ğŸ‡²ğŸ‡¾", "sg": "ğŸ‡¸ğŸ‡¬", "id": "ğŸ‡®ğŸ‡©",
    "ph": "ğŸ‡µğŸ‡­", "th": "ğŸ‡¹ğŸ‡­", "vn": "ğŸ‡»ğŸ‡³", "mm": "ğŸ‡²ğŸ‡²", "kh": "ğŸ‡°ğŸ‡­",
    "bd": "ğŸ‡§ğŸ‡©", "pk": "ğŸ‡µğŸ‡°", "ae": "ğŸ‡¦ğŸ‡ª", "il": "ğŸ‡®ğŸ‡±", "eg": "ğŸ‡ªğŸ‡¬",
    "ng": "ğŸ‡³ğŸ‡¬", "ke": "ğŸ‡°ğŸ‡ª", "gh": "ğŸ‡¬ğŸ‡­", "dz": "ğŸ‡©ğŸ‡¿", "ma": "ğŸ‡²ğŸ‡¦",
    "tn": "ğŸ‡¹ğŸ‡³", "tr": "ğŸ‡¹ğŸ‡·", "ir": "ğŸ‡®ğŸ‡·", "iq": "ğŸ‡®ğŸ‡¶", "sy": "ğŸ‡¸ğŸ‡¾",
    "lb": "ğŸ‡±ğŸ‡§", "jo": "ğŸ‡¯ğŸ‡´", "qa": "ğŸ‡¶ğŸ‡¦", "kw": "ğŸ‡°ğŸ‡¼", "om": "ğŸ‡´ğŸ‡²",
    "ye": "ğŸ‡¾ğŸ‡ª", "ge": "ğŸ‡¬ğŸ‡ª", "am": "ğŸ‡¦ğŸ‡²", "az": "ğŸ‡¦ğŸ‡¿", "tm": "ğŸ‡¹ğŸ‡²",
    "uz": "ğŸ‡ºğŸ‡¿", "kz": "ğŸ‡°ğŸ‡¿", "kg": "ğŸ‡°ğŸ‡¬", "tj": "ğŸ‡¹ğŸ‡¯", "mn": "ğŸ‡²ğŸ‡³",
    "np": "ğŸ‡³ğŸ‡µ", "lk": "ğŸ‡±ğŸ‡°", "bt": "ğŸ‡§ğŸ‡¹", "mv": "ğŸ‡²ğŸ‡»", "bn": "ğŸ‡§ğŸ‡³",
    "tw": "ğŸ‡¹ğŸ‡¼", "hk": "ğŸ‡­ğŸ‡°", "mo": "ğŸ‡²ğŸ‡´", "kh": "ğŸ‡°ğŸ‡­", "la": "ğŸ‡±ğŸ‡¦",
    "bd": "ğŸ‡§ğŸ‡©", "mm": "ğŸ‡²ğŸ‡²", "tl": "ğŸ‡¹ğŸ‡±", "pg": "ğŸ‡µğŸ‡¬", "fj": "ğŸ‡«ğŸ‡¯",
    "sb": "ğŸ‡¸ğŸ‡§", "vu": "ğŸ‡»ğŸ‡º", "nc": "ğŸ‡³ğŸ‡¨", "pf": "ğŸ‡µğŸ‡«", "wf": "ğŸ‡¼ğŸ‡«",
    "to": "ğŸ‡¹ğŸ‡´", "tv": "ğŸ‡¹ğŸ‡»", "ki": "ğŸ‡°ğŸ‡®", "nr": "ğŸ‡³ğŸ‡·", "ws": "ğŸ‡¼ğŸ‡¸",
    "as": "ğŸ‡¦ğŸ‡¸", "ck": "ğŸ‡¨ğŸ‡°", "nu": "ğŸ‡³ğŸ‡º", "mp": "ğŸ‡²ğŸ‡µ", "gu": "ğŸ‡¬ğŸ‡º",
    "pw": "ğŸ‡µğŸ‡¼", "mh": "ğŸ‡²ğŸ‡­", "fm": "ğŸ‡«ğŸ‡²", "mh": "ğŸ‡²ğŸ‡­", "fm": "ğŸ‡«ğŸ‡²",
    "ki": "ğŸ‡°ğŸ‡®", "nr": "ğŸ‡³ğŸ‡·", "mh": "ğŸ‡²ğŸ‡­", "pw": "ğŸ‡µğŸ‡¼", "as": "ğŸ‡¦ğŸ‡¸",
    "ws": "ğŸ‡¼ğŸ‡¸", "sb": "ğŸ‡¸ğŸ‡§", "vu": "ğŸ‡»ğŸ‡º", "fj": "ğŸ‡«ğŸ‡¯", "pg": "ğŸ‡µğŸ‡¬",
    "tl": "ğŸ‡¹ğŸ‡±", "nz": "ğŸ‡³ğŸ‡¿", "au": "ğŸ‡¦ğŸ‡º", "ck": "ğŸ‡¨ğŸ‡°", "tv": "ğŸ‡¹ğŸ‡»",
    "pf": "ğŸ‡µğŸ‡«", "ki": "ğŸ‡°ğŸ‡®", "nc": "ğŸ‡³ğŸ‡¨", "nu": "ğŸ‡³ğŸ‡º", "to": "ğŸ‡¹ğŸ‡´",
    "wf": "ğŸ‡¼ğŸ‡«", "sb": "ğŸ‡¸ğŸ‡§", "vu": "ğŸ‡»ğŸ‡º", "fj": "ğŸ‡«ğŸ‡¯", "pg": "ğŸ‡µğŸ‡¬",
    "tl": "ğŸ‡¹ğŸ‡±", "nz": "ğŸ‡³ğŸ‡¿", "au": "ğŸ‡¦ğŸ‡º", "ck": "ğŸ‡¨ğŸ‡°", "tv": "ğŸ‡¹ğŸ‡»",
    "pf": "ğŸ‡µğŸ‡«", "ki": "ğŸ‡°ğŸ‡®", "nc": "ğŸ‡³ğŸ‡¨", "nu": "ğŸ‡³ğŸ‡º", "to": "ğŸ‡¹ğŸ‡´",
    "wf": "ğŸ‡¼ğŸ‡«", "sb": "ğŸ‡¸ğŸ‡§", "vu": "ğŸ‡»ğŸ‡º", "fj": "ğŸ‡«ğŸ‡¯", "pg": "ğŸ‡µğŸ‡¬",
    "tl": "ğŸ‡¹ğŸ‡±", "nz": "ğŸ‡³ğŸ‡¿", "au": "ğŸ‡¦ğŸ‡º", "ck": "ğŸ‡¨ğŸ‡°", "tv": "ğŸ‡¹ğŸ‡»",
    "pf": "ğŸ‡µğŸ‡«", "ki": "ğŸ‡°ğŸ‡®", "nc": "ğŸ‡³ğŸ‡¨", "nu": "ğŸ‡³ğŸ‡º", "to": "ğŸ‡¹ğŸ‡´",
    "wf": "ğŸ‡¼ğŸ‡«", "sb": "ğŸ‡¸ğŸ‡§", "vu": "ğŸ‡»ğŸ‡º", "fj": "ğŸ‡«ğŸ‡¯", "pg": "ğŸ‡µğŸ‡¬",
    "tl": "ğŸ‡¹ğŸ‡±", "nz": "ğŸ‡³ğŸ‡¿", "au": "ğŸ‡¦ğŸ‡º", "ck": "ğŸ‡¨ğŸ‡°", "tv": "ğŸ‡¹ğŸ‡»",
    "pf": "ğŸ‡µğŸ‡«", "ki": "ğŸ‡°ğŸ‡®", "nc": "ğŸ‡³ğŸ‡¨", "nu": "ğŸ‡³ğŸ‡º", "to": "ğŸ‡¹ğŸ‡´",
    "wf": "ğŸ‡¼ğŸ‡«", "sb": "ğŸ‡¸ğŸ‡§", "vu": "ğŸ‡»ğŸ‡º", "fj": "ğŸ‡«ğŸ‡¯", "pg": "ğŸ‡µğŸ‡¬",
    "tl": "ğŸ‡¹ğŸ‡±", "nz": "ğŸ‡³ğŸ‡¿", "au": "ğŸ‡¦ğŸ‡º", "ck": "ğŸ‡¨ğŸ‡°", "tv": "ğŸ‡¹ğŸ‡»",
    "pf": "ğŸ‡µğŸ‡«", "ki": "ğŸ‡°ğŸ‡®", "nc": "ğŸ‡³ğŸ‡¨", "nu": "ğŸ‡³ğŸ‡º", "to": "ğŸ‡¹ğŸ‡´",
    "wf": "ğŸ‡¼ğŸ‡«", "sb": "ğŸ‡¸ğŸ‡§", "vu": "ğŸ‡»ğŸ‡º", "fj": "ğŸ‡«ğŸ‡¯", "pg": "ğŸ‡µğŸ‡¬",
    "tl": "ğŸ‡¹ğŸ‡±", "nz": "ğŸ‡³ğŸ‡¿", "au": "ğŸ‡¦ğŸ‡º", "ck": "ğŸ‡¨ğŸ‡°", "tv": "ğŸ‡¹ğŸ‡»",
    "pf": "ğŸ‡µğŸ‡«", "ki": "ğŸ‡°ğŸ‡®", "nc": "ğŸ‡³ğŸ‡¨", "nu": "ğŸ‡³ğŸ‡º", "to": "ğŸ‡¹ğŸ‡´",
    "wf": "ğŸ‡¼ğŸ‡«", "sb": "ğŸ‡¸ğŸ‡§", "vu": "ğŸ‡»ğŸ‡º", "fj": "ğŸ‡«ğŸ‡¯", "pg": "ğŸ‡µğŸ‡¬",
    "tl": "ğŸ‡¹ğŸ‡±", "nz": "ğŸ‡³ğŸ‡¿", "au": "ğŸ‡¦ğŸ‡º", "ck": "ğŸ‡¨ğŸ‡°", "tv": "ğŸ‡¹ğŸ‡»",
    "pf": "ğŸ‡µğŸ‡«", "ki": "ğŸ‡°ğŸ‡®", "nc": "ğŸ‡³ğŸ‡¨", "nu": "ğŸ‡³ğŸ‡º", "to": "ğŸ‡¹ğŸ‡´",
    "wf": "ğŸ‡¼ğŸ‡«", "sb": "ğŸ‡¸ğŸ‡§", "vu": "ğŸ‡»ğŸ‡º", "fj": "ğŸ‡«ğŸ‡¯", "pg": "ğŸ‡µğŸ‡¬",
    "tl": "ğŸ‡¹ğŸ‡±", "nz": "ğŸ‡³ğŸ‡¿", "au": "ğŸ‡¦ğŸ‡º", "ck": "ğŸ‡¨ğŸ‡°", "tv": "ğŸ‡¹ğŸ‡»",
    "pf": "ğŸ‡µğŸ‡«", "ki": "ğŸ‡°ğŸ‡®", "nc": "ğŸ‡³ğŸ‡¨", "nu": "ğŸ‡³ğŸ‡º", "to": "ğŸ‡¹ğŸ‡´",
    "wf": "ğŸ‡¼ğŸ‡«", "sb": "ğŸ‡¸ğŸ‡§", "vu": "ğŸ‡»ğŸ‡º", "fj": "ğŸ‡«ğŸ‡¯", "pg": "ğŸ‡µğŸ‡¬",
    "tl": "ğŸ‡¹ğŸ‡±", "nz": "ğŸ‡³ğŸ‡¿", "au": "ğŸ‡¦ğŸ‡º", "ck": "ğŸ‡¨ğŸ‡°", "tv": "ğŸ‡¹ğŸ‡»",
    "pf": "ğŸ‡µğŸ‡«", "ki": "ğŸ‡°ğŸ‡®", "nc": "ğŸ‡³ğŸ‡¨", "nu": "ğŸ‡³ğŸ‡º", "to": "ğŸ‡¹ğŸ‡´",
    "wf": "ğŸ‡¼ğŸ‡«", "sb": "ğŸ‡¸ğŸ‡§", "vu": "ğŸ‡»ğŸ‡º", "fj": "ğŸ‡«ğŸ‡¯", "pg": "ğŸ‡µğŸ‡¬",
    "tl": "ğŸ‡¹ğŸ‡±", "nz": "ğŸ‡³ğŸ‡¿", "au": "ğŸ‡¦ğŸ‡º", "ck": "ğŸ‡¨ğŸ‡°", "tv": "ğŸ‡¹ğŸ‡»",
}
DOWNLOAD_PATH = r"A:\Dossiers\Documents\SpeedRun_tiktok\Video_download"
FINAL_VIDEO_PATH = r"A:\Dossiers\Documents\SpeedRun_tiktok\Video_final"
USED_RUNS_DB_FILE = "used_runs_db.json"

# Fonctions utilitaires
def get_flag_emoji(country_code):
    return COUNTRY_FLAGS.get(country_code.lower(), "")

def api_get(endpoint):
    response = requests.get(f"{API_BASE_URL}/{endpoint}")
    return response.json() if response.ok else None

# Fonctions principales
def get_games():
    response = api_get("games")
    return {game['id']: game['names']['international'] for game in response['data']} if response else {}

def get_player_info(player_id):
    response = api_get(f"users/{player_id}")
    if response and 'data' in response and response['data'] is not None:
        player = response['data']
        country_code = 'Inconnu'  # Valeur par dÃ©faut
        if 'location' in player and player['location'] is not None:
            country_code = player['location'].get('country', {}).get('code', 'Inconnu')
        return player['names']['international'], country_code
    return "Inconnu", "Inconnu"

def get_category_name(category_id):
    response = api_get(f"categories/{category_id}")
    return response['data']['name'] if response and 'data' in response else "Inconnue"

def get_top_run_from_category(game_id, category_id, game_name):
    response = api_get(f"leaderboards/{game_id}/category/{category_id}?top=1")
    if not response or 'runs' not in response['data'] or not response['data']['runs']:
        return None

    category_name = get_category_name(category_id)
    top_run_data = response['data']['runs'][0]['run']
    player_id = top_run_data['players'][0]['id']
    player_name, country_code = get_player_info(player_id)

    return {
        'game_name': game_name,
        'category_name': category_name,
        'player_name': player_name,
        'country': country_code,
        'date': top_run_data.get('date', 'Inconnue'),
        'video_url': top_run_data.get('videos', {}).get('links', [{}])[0].get('uri', '')
    }

def safe_filename(filename):
    """ Nettoie le nom de fichier en retirant ou remplaÃ§ant les caractÃ¨res non autorisÃ©s. """
    filename = re.sub(r'[\\/*?:"<>|]', '', filename)  # Remplacer par des caractÃ¨res autorisÃ©s au besoin
    return filename

def download_and_process_video(video_url, run_info):
    ydl_opts = {
        'format': 'best',
        'outtmpl': os.path.join(DOWNLOAD_PATH, '%(title)s.%(ext)s'),
        'noplaylist': True
    }
    with youtube_dl.YoutubeDL(ydl_opts) as ydl:
        info_dict = ydl.extract_info(video_url, download=True)
        video_title = safe_filename(info_dict.get('title', 'downloaded_video'))
        video_extension = info_dict.get('ext', 'mp4')

    video_filename = f"{video_title}.{video_extension}"
    video_path = os.path.join(DOWNLOAD_PATH, video_filename)

    if not os.path.exists(video_path):
        # Essayer de trouver le fichier tÃ©lÃ©chargÃ© en cherchant dans le dossier
        possible_files = [f for f in os.listdir(DOWNLOAD_PATH) if f.startswith(video_title) and f.endswith(video_extension)]
        if possible_files:
            video_path = os.path.join(DOWNLOAD_PATH, possible_files[0])
        else:
            print(f"Le fichier vidÃ©o n'existe pas : {video_path}")
            return

    final_video_filename = os.path.join(FINAL_VIDEO_PATH, video_filename)
    add_text_to_video(video_path, final_video_filename, run_info)



def add_text_to_video(video_path, final_video_path, run_info):
    # Obtenir le drapeau du pays
    country_flag = get_flag_emoji(run_info['country'])

    # Construire le texte Ã  ajouter Ã  la vidÃ©o
    text_content = f"{run_info['player_name']} {country_flag}\n{run_info['game_name']}\n{run_info['category_name']}\n{run_info['date']}"

    # Ouvrir la vidÃ©o originale
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        print(f"Erreur lors de l'ouverture de la vidÃ©o : {video_path}")
        return

    # RÃ©cupÃ©rer les dimensions originales de la vidÃ©o
    orig_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    orig_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

    # DÃ©finir les dimensions de sortie pour TikTok (9:16)
    output_height = 1920
    output_width = 1080

    # Calculer le facteur d'Ã©chelle et les nouvelles dimensions
    scale_factor = output_height / orig_height
    new_width = int(orig_width * scale_factor)
    x_margin = max((new_width - output_width) // 2, 0)

    # Utiliser le codec 'mp4v' pour la compatibilitÃ© avec le format MP4
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')

    # CrÃ©er l'objet VideoWriter pour la sortie
    out = cv2.VideoWriter(final_video_path, fourcc, cap.get(cv2.CAP_PROP_FPS), (output_width, output_height))

    # Police de caractÃ¨res pour le texte
    font = cv2.FONT_HERSHEY_SIMPLEX

    # Traiter chaque frame
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Redimensionner et recadrer la frame
        resized_frame = cv2.resize(frame, (new_width, output_height))
        cropped_frame = resized_frame[:, x_margin:x_margin + output_width]

        # Ajouter le texte Ã  la frame
        y0, dy = 50, 40
        for i, line in enumerate(text_content.split('\n')):
            y = y0 + i * dy
            cv2.putText(cropped_frame, line, (50, y), font, 1, (255, 255, 255), 2)

        # Ã‰crire la frame modifiÃ©e dans le fichier de sortie
        out.write(cropped_frame)

    # LibÃ©rer les ressources
    cap.release()
    out.release()



def main():
    games = get_games()
    used_runs_db = json.load(open(USED_RUNS_DB_FILE, "r")) if os.path.exists(USED_RUNS_DB_FILE) else {}

    for _ in range(3):
        game_id, game_name = random.choice(list(games.items()))
        categories = api_get(f"games/{game_id}/categories")['data']
        for category in categories:
            if category['id'] not in used_runs_db.get(game_id, []):
                # Passer game_name en tant que troisiÃ¨me argument
                top_run = get_top_run_from_category(game_id, category['id'], game_name)
                if top_run and top_run['video_url']:
                    download_and_process_video(top_run['video_url'], top_run)
                    used_runs_db.setdefault(game_id, []).append(category['id'])
                    break

    json.dump(used_runs_db, open(USED_RUNS_DB_FILE, "w"))

if __name__ == "__main__":
    main()
